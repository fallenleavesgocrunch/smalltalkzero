using: 'log'

range = (
      @of: (scalar-class: number-t,)
  #traits: (iterable-t of: scalar-class, sequential-t of: scalar-class,)

    start: scalar-class
     stop: scalar-class)

/* creation */
[ start to: stop
| assert: start == stop
  number-t, number-t -> range of: start
| {start: start, stop: stop} ]


/* iteration */
[ range do: block
| range, (scalar-class -> ø) -> ø
| assert: start ≤ stop
  start to: stop step: step do: block ]

[ range reverse-do: block
| range, (scalar-class -> ø) -> ø
| assert: start ≤ stop
  stop to: start step: -step do: block ]

[ start to: stop do: block
| number-t, number-t, (start -> ø) -> ø
| start to: stop by: 1 do: block ]

[ start to: stop by: step do: block
| number-t, number-t, number-t, (step -> ø) -> ø
| block evaluate: start
  start + step ≥ stop else: [ start + step to: stop do: block ] ]

[ range step
| range -> scalar-class
| 1 ]


/* iterable-t */
[ range length
| range -> uint
| stop - start + 1 ]

[ range[index]
| range, uint -> scalar-class
| idx = index + start
| log assert: idx ≤ stop
  idx ]
