list = (
        @of: (element-class: object-t,)
    #traits: (iterable-t of: element-class, sequential-t of: element-class,)

     #scope: public
     length: uint

     #scope: package
   elements: &array of: element-class
  allocator: &memory-allocator )


[ _ capacity | &list -> uint | _ elements length ]

/* adding / removing */
[ _ add: element | &!list, element-class -> memory-error |
  length == capacity then: [grow else: [ error | ^error ]]
  elements[length] = element
  length += 1
  ^no-error ]

[ _ remove-index: index | &!list, uint -> ø |
  assert: 0 ≤ index < length
  length -= 1
  length == 0 then: [^ø]
  element[index] = element[length] ]

[ _ remove: element | &!list, element-class -> iterable-error |
  index? = index-of: element
  index = index? else: [ error | ^error ]
  remove-index: index
  ^no-error ]


#scope: private
[ _ grow | &!list -> memory-error |
  replacement? = allocator allocate: elements length * 2 of: _ class element-class
  replacement = replacement? else: [ error | ^error ]
  replacement copy: elements
  elements = replacement
  ^no-error ]
